**Solutions to the DBMS Lab assignment** 

-- 4) Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000.
SELECT c.CUS_GENDER, COUNT(DISTINCT c.CUS_ID) AS Total_Customers
FROM Customer c
INNER JOIN `Order` o ON c.CUS_ID = o.CUS_ID
WHERE o.ORD_AMOUNT >= 3000
GROUP BY c.CUS_GENDER;

-- 5) Display all the orders along with product name ordered by a customer having Customer_Id=2.
SELECT o.ORD_ID, p.PRO_NAME, o.ORD_AMOUNT
FROM `Order` o
INNER JOIN supplier_pricing sp ON o.PRICING_ID = sp.PRICING_ID
INNER JOIN Product p ON sp.PRO_ID = p.PRO_ID
WHERE o.CUS_ID = 2;

-- 6) Display the Supplier details who can supply more than one product.
SELECT s.*
FROM Supplier s
INNER JOIN supplier_pricing sp ON s.SUPP_ID = sp.SUPP_ID
GROUP BY s.SUPP_ID
HAVING COUNT(DISTINCT sp.PRO_ID) > 1;

-- 7) Find the least expensive product from each category and print the table with category id, name, product name, and price of the product.
SELECT c.CAT_ID, c.CAT_NAME, p.PRO_NAME, MIN(sp.SUPP_PRICE) AS Least_Expensive_Price
FROM Category c
INNER JOIN Product p ON c.CAT_ID = p.CAT_ID
INNER JOIN supplier_pricing sp ON p.PRO_ID = sp.PRO_ID
GROUP BY c.CAT_ID, c.CAT_NAME, p.PRO_NAME;

-- 8) Display the Id and Name of the Product ordered after “2021-10-05”.
SELECT p.PRO_ID, p.PRO_NAME
FROM `Order` o
INNER JOIN supplier_pricing sp ON o.PRICING_ID = sp.PRICING_ID
INNER JOIN Product p ON sp.PRO_ID = p.PRO_ID
WHERE o.ORD_DATE > '2021-10-05';

-- 9) Display customer name and gender whose names start or end with character 'A'.
SELECT c.CUS_NAME, c.CUS_GENDER
FROM Customer c
WHERE c.CUS_NAME LIKE 'A%' OR c.CUS_NAME LIKE '%A';

-- 10) Create a stored procedure to display supplier id, name, Rating (Average rating of all the products sold by every customer) and Type_of_Service.
DELIMITER //
CREATE PROCEDURE GetSupplierRatings()
BEGIN
    SELECT s.SUPP_ID, s.SUPP_NAME, AVG(r.RAT_RATSTARS) AS Rating,
    CASE
        WHEN AVG(r.RAT_RATSTARS) = 5 THEN 'Excellent Service'
        WHEN AVG(r.RAT_RATSTARS) > 4 THEN 'Good Service'
        WHEN AVG(r.RAT_RATSTARS) > 2 THEN 'Average Service'
        ELSE 'Poor Service'
    END AS Type_of_Service
    FROM Supplier s
    LEFT JOIN supplier_pricing sp ON s.SUPP_ID = sp.SUPP_ID
    LEFT JOIN `Order` o ON sp.PRICING_ID = o.PRICING_ID
    LEFT JOIN Rating r ON o.ORD_ID = r.ORD_ID
    GROUP BY s.SUPP_ID, s.SUPP_NAME;
END //
DELIMITER ;

